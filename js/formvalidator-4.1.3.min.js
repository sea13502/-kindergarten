(function ($) {
    $.formValidator = {
        initConfig: function (a) {
            var b = {}; $.extend(true, b, initConfig_setting, a || {}); if (b.mode == "SingleTip") { b.errorFocus = false }; if (b.formID != "") { $("#" + b.formID).submit(function () { if (b.ajaxForm != null) { $.formValidator.ajaxForm(b.validatorGroup, b.ajaxForm); return false } else { if (b.ajaxCountValid > 0) { b.onAlert(b.ajaxPrompt); return false } return $.formValidator.pageIsValid(b.validatorGroup) } }) } $("body").data(b.validatorGroup, b); if (b.theme == "") { return } var c = fv_scriptSrc.split('/'); var d = c[c.length - 1]; var e = fv_scriptSrc.replace(d, '');
            $.ajax({
                async: false, type: "GET", url: "/images/theme.js",
                dataType: "script", error: function ()
                {
                    // alert('当前皮肤加载出错，请确认皮肤【' + b.theme + '】是否存在')
                }
            });
            if ($.browser.msie)
            {
                var f = document.createElement("link");
                f.rel = "stylesheet";
                f.type = "text/css";
                f.href = "./page_files/style.css";
                document.getElementsByTagName("head")[0].appendChild(f)
            }
            else
            {
                var g = document.createElement('style');
                g.setAttribute("type", "text/css");
                var h = "@import url('./page_files/style.css');";
                if (g.styleSheet)
                {
                    g.styleSheet.cssText = h
                }
                else {
                    g.appendChild(document.createTextNode(h))
                } document.getElementsByTagName("head")[0].appendChild(g)
            }
        }, sustainType: function (a, b) {
            var c = a.tagName; var d = a.type;
            switch (b) {
                case "formValidator":
                    return true;
                case "inputValidator":
                    return (c == "INPUT" || c == "TEXTAREA" || c == "SELECT");
                case "compareValidator":
                    return ((c == "INPUT" || c == "TEXTAREA") ? (d != "checkbox" && d != "radio") : false);
                case "ajaxValidator":
                    return (d == "text" || d == "textarea" || d == "file" || d == "password" || d == "select-one"); case "regexValidator": return ((c == "INPUT" || c == "TEXTAREA") ? (d != "checkbox" && d != "radio") : false);
                case "functionValidator":
                    return true; case "passwordValidator":
                    return d == "password"
            }
        }, appendValid: function (a, b) {
            var c = $("#" + a).get(0);
            var d = b.validateType;
            if (!$.formValidator.sustainType(c, d)) { return -1 }
            if (d == "formValidator" || c.settings == undefined)
            {
                c.settings = new Array()
            }
            if (c.settings.length == 0 && d != "formValidator")
            {
                $(c).formValidator()
            };
            var e = c.settings.push(b); c.settings[e - 1].index = e - 1;
            return e - 1
        }, setTipState: function (a, b, c)
        {
            var d = $("body").data(a.validatorGroup);
            if (d.mode == "SingleTip") {
                $("#fv_content").html(c);
                a.Tooltip = c;
                if (b != "onError") { e.hide() }
            } else {
                var e = $("#" + a.settings[0].tipID);
                var f = b == "onShow" ? onShowHtml : (b == "onFocus" ? onFocusHtml : (b == "onCorrect" ? onCorrectHtml : onErrorHtml));
                if (f.length = 0) { e.hide() } else {
                    if (a.validatorPasswordIndex > 0 && b == "onCorrect") {
                        var g = a.settings[a.validatorPasswordIndex]; var h = $.formValidator.passwordValid(a); c = "";
                        if (h == -1 && g.onErrorContinueChar != "") {
                            c = g.onErrorContinueChar
                        }
                        else if (h == -2 && g.onErrorSameChar != "")
                        {
                            c = g.onErrorSameChar
                        }
                        else if (h == -3 && g.onErrorCompareSame != "") {
                            c = g.onErrorCompareSame
                        }
                        if (c != "") {
                            $.formValidator.setTipState(a, 'onError', c);
                            return
                        }
                        c = passwordStrengthText[h <= 0 ? 0 : h - 1]
                    }
                    f = f.replace(/\$class\$/g, b).replace(/\$data\$/g, c);
                    if (b != "") {
                        e.html(f).removeClass().addClass(b).show()
                    }
                    else { e.html(f).show() }
                }
                var i = a.type;
                if (i == "password" || i == "text" || i == "file") {
                    jqobj = $(a); if (onShowClass != "" && b == "onShow") {
                        jqobj.removeClass().addClass(onShowClass)
                    };
                    if (onFocusClass != "" && b == "onFocus") {
                        jqobj.removeClass().addClass(onFocusClass)
                    };
                    if (onCorrectClass != "" && b == "onCorrect") {
                        jqobj.removeClass().addClass(onCorrectClass)
                    };
                    if (onErrorClass != "" && b == "onError") {
                        jqobj.removeClass().addClass(onErrorClass)
                    }
                }
            }
        }, resetTipState: function (c) {
            if (c == undefined) { c = "1" };
            var d = $("body").data(c);
            $.each(d.validObjects, function () {
                var a = this.settings[0];
                if (!a.bind) {
                    return
                }
                var b = a.defaultPassed;
                $.formValidator.setTipState(this, b ? "onCorrect" : "onShow", b ? $.formValidator.getStatusText(this, a.onCorrect) : a.onShow)
            })
        }, setFailState: function (a, b) {
            $.formValidator.setTipState($("#" + a).get(0), "onError", b)
        }, showMessage: function (a) {
            var b = a.id; var c = $("#" + b).get(0); var d = a.isValid;
            var e = a.setting; var f = "", showclass = "";
            var g = $("body").data(c.validatorGroup);
            if (!d) {
                showclass = "onError";
                if (e.validateType == "ajaxValidator") {
                    if (e.lastValid == "") {
                        showclass = "onLoad"; f = e.onWait
                    } else { f = $.formValidator.getStatusText(c, e.onError) }
                } else {
                    f = (a.errormsg == "" ? $.formValidator.getStatusText(c, e.onError) : a.errormsg)
                }
                if (g.mode == "AlertTip") {
                    if (c.validValueOld != $(c).val()) { g.onAlert(f) }
                } else {
                    $.formValidator.setTipState(c, showclass, f)
                }
            } else {
                f = $.formValidator.isEmpty(b) ? e.onEmpty : $.formValidator.getStatusText(c, e.onCorrect);
                $.formValidator.setTipState(c, "onCorrect", f)
            } return f
        }, showAjaxMessage: function (e) {
            var a = $("#" + e.id).get(0);
            var b = a.settings[e.ajax];
            var c = a.validValueOld;
            var d = $(a).val();
            e.setting = b;
            if (c != d || c == d && a.onceValided == undefined) {
                $.formValidator.ajaxValid(e)
            } else {
                if (b.isValid != undefined && !b.isValid) {
                    a.lastshowclass = "onError"; a.lastshowmsg = $.formValidator.getStatusText(a, b.onError)
                }
                $.formValidator.setTipState(a, a.lastshowclass, a.lastshowmsg)
            }
        }, getLength: function (a) {
            var b = $("#" + a);
            var c = b.get(0);
            var d = c.type;
            var e = 0;
            switch (d) {
                case "text":
                case "hidden":
                case "password":
                case "textarea":
                case "file":
                    var f = b.val();
                    var g = c.settings[0];
                    if (c.isInputControl && c.value == g.onShowText) { f = "" }
                    var h = $("body").data(c.validatorGroup);
                    if (h.wideWord) {
                        for (var i = 0; i < f.length; i++) {
                            e = e + ((f.charCodeAt(i) >= 0x4e00 && f.charCodeAt(i) <= 0x9fa5) ? 2 : 1)
                        }
                    } else { e = f.length }
                    break;
                case "checkbox":
                case "radio":
                    e = $("input[type='" + d + "'][name='" + b.attr("name") + "']:checked").length;
                    break;
                case "select-one": e = c.options ? c.options.selectedIndex : -1;
                    break;
                case "select-multiple": e = $("select[name=" + c.name + "] option:selected").length;
                    break
            } return e
        }, isEmpty: function (a) {
            return ($("#" + a).get(0).settings[0].empty && $.formValidator.getLength(a) == 0)
        }, isOneValid: function (a) {
            return $.formValidator.oneIsValid(a).isValid
        }, oneIsValid: function (a) {
            var e = {}; e.id = a;
            e.dom = $("#" + a).get(0);
            e.initConfig = $("body").data(e.dom.validatorGroup);
            e.ajax = -1;
            e.errormsg = "";
            e.settings = e.dom.settings;
            var b = e.settings.length;
            var c;
            if (b == 1) {
                e.settings[0].bind = false
            } if (!e.settings[0].bind) {
                return null
            }
            $.formValidator.resetInputValue(true, e.initConfig, a);
            for (var i = 0; i < b; i++) {
                if (i == 0) {
                    if ($.formValidator.isEmpty(a)) {
                        e.isValid = true;
                        e.setting = e.settings[0];
                        break
                    } continue
                } e.setting = e.settings[i];
                c = e.settings[i].validateType;
                switch (c) {
                    case "inputValidator": $.formValidator.inputValid(e);
                        break;
                    case "compareValidator": $.formValidator.compareValid(e);
                        break;
                    case "regexValidator": $.formValidator.regexValid(e);
                        break;
                    case "functionValidator": $.formValidator.functionValid(e);
                        break;
                    case "ajaxValidator": e.ajax = i;
                        break;
                    case "passwordValidator":
                        break
                } if (!e.settings[i].isValid) {
                    e.isValid = false;
                    e.setting = e.settings[i];
                    break
                } else {
                    e.isValid = true;
                    e.setting = e.settings[0];
                    if (e.settings[i].validateType == "ajaxValidator") { break }
                }
            }
            $.formValidator.resetInputValue(false, e.initConfig, a);
            return e
        }, pageIsValid: function (b) {
            if (b == undefined) { b = "1" };
            var c = true, returnObj, firstErrorMessage = "", errorMessage;
            var d = "^", thefirstid, name, name_list = "^";
            var e = new Array();
            var f = $("body").data(b);
            f.status = "sumbiting"; f.ajaxCountSubmit = 0;
            $.each(f.validObjects, function () {
                if ($(this).length == 0) { return true }
                if (!this.settings[0].bind) { return true }
                if (this.validatorAjaxIndex != undefined && this.onceValided == undefined) {
                    returnObj = $.formValidator.oneIsValid(this.id);
                    if (returnObj.ajax == this.validatorAjaxIndex) {
                        f.status = "sumbitingWithAjax"
                        ; $.formValidator.ajaxValid(returnObj)
                    }
                }
            }); if (f.ajaxCountSubmit > 0) { return false }
            $.each(f.validObjects, function () {
                if ($(this).length == 0) { return true };
                if (this.settings[0].bind) {
                    name = this.name;
                    if (name_list.indexOf("^" + name + "^") == -1) {
                        onceValided = this.onceValided == undefined ? false : this.onceValided;
                        if (name) { name_list = name_list + name + "^" };
                        returnObj = $.formValidator.oneIsValid(this.id);
                        if (returnObj) {
                            if (!returnObj.isValid) {
                                c = false;
                                errorMessage = returnObj.errormsg == "" ? returnObj.setting.onError : returnObj.errormsg;
                                e[e.length] = errorMessage;
                                if (thefirstid == null) {
                                    thefirstid = returnObj.id
                                }; if (firstErrorMessage == "") {
                                    firstErrorMessage = errorMessage
                                }
                            } if (f.mode != "AlertTip") {
                                var a = this.settings[0].tipID;
                                if (d.indexOf("^" + a + "^") == -1) {
                                    if (!returnObj.isValid) { d = d + a + "^" };
                                    $.formValidator.showMessage(returnObj)
                                }
                            } if (f.oneByOneVerify && !returnObj.isValid) { return false }
                        }
                    }
                }
            });
            if (c) {
                if (!f.onSuccess()) {
                    return
                }
                window.wxc.xcConfirm("正在提交数据，请稍后！", window.wxc.xcConfirm.typeEnum.info)
            } else {
                alert("有未填写或错误的信息，请仔细核实!");
                f.onError(firstErrorMessage, $("#" + thefirstid).get(0), e);
                if (thefirstid && f.errorFocus) { $("#" + thefirstid).focus() }
            }
            f.status = "init";
            if (c && f.debug) {
                alert("现在正处于调试模式(debug:true)，不能提交")
            }
            return !f.debug && c
        }, ajaxForm: function (d, e, f) {
            if (d == undefined) {
                d = "1"
            };
            var g = {};
            $.extend(true, g, ajaxForm_setting, e || {});
            var h = $("body").data(d);
            if (f == undefined) {
                f = h.formID;
                if (f == "") {
                    alert('表单ID未传入'); return false
                }
            };
            if (!$.formValidator.pageIsValid(d)) {
                return false
            };
            var i = g.url;
            var j = g.data;
            var k = $.formValidator.serialize('#' + f);
            if (g.type == "POST") {
                j = j + (j != "" ? ("&" + k) : k)
            } else {
                i = i + (i.indexOf("?") > -1 ? ("&" + k) : ("?" + k))
            }
            $.ajax({
                type: g.type, url: i, cache: g.cache, data: j, async: g.async, timeout: g.timeout, dataType: g.dataType, beforeSend: function (a, b) {
                    if (g.buttons && g.buttons.length > 0) {
                        g.buttons.attr({ "disabled": true })
                    };
                    return g.beforeSend(a, b)
                }, success: function (a, b, c) {
                    g.success(a, b, c)
                }, complete: function (a, b) {
                    if (g.buttons && g.buttons.length > 0) {
                        g.buttons.attr({ "disabled": false })
                    }; g.complete(a, b)
                }, error: function (a, b, c) { g.error(a, b, c) }
            })
        }, serialize: function (g, h) {
            if (h != undefined) {
                $.formValidator.resetInputValue(true, h)
            }; var i = $(g).serialize(); if (h != undefined) {
                $.formValidator.resetInputValue(false, h)
            }; var j = i.split("&"); var k = "";
            $.each(j, function (a, b) {
                var c = b.indexOf("=");
                if (c > 0) {
                    var d = b.substring(0, c);
                    var e = escape(decodeURIComponent(b.substr(c + 1)));
                    var f = d + "=" + e; k = k == "" ? f : k + '&' + f
                }
            }); return k
        }, ajaxValid: function (e) {
            var f = e.id;
            var g = $("#" + f);
            var h = g.get(0);
            var i = e.initConfig;
            var j = h.settings;
            var k = j[e.ajax];
            var l = k.url;
            var m = k.data;
            var n = h.validatorGroup;
            var i = $("body").data(n);
            var o = $.formValidator.serialize(i.ajaxObjects);
            o = "clientid=" + f + "&" + (k.randNumberName ? k.randNumberName + "=" + ((new Date().getTime()) + Math.round(Math.random() * 10000)) : "") + (o.length > 0 ? "&" + o : "");
            if (k.type == "POST") {
                m = m + (m != "" ? ("&" + o) : o)
            } else {
                l = l + (l.indexOf("?") > -1 ? ("&" + o) : ("?" + o))
            } $.ajax({
                type: k.type, url: l, cache: k.cache, data: m, async: k.async, timeout: k.timeout, dataType: k.dataType, success: function (a, b, c) {
                    var d, ls_status, ls_msg, lb_isValid = false;
                    $.formValidator.dealAjaxRequestCount(n, -1);
                    e.dom.onceValided = true;
                    d = k.success(a, b, c);
                    if ((typeof d) == "string") {
                        ls_status = "onError";
                        ls_msg = d
                    } else if (d) {
                        lb_isValid = true; ls_status = "onCorrect";
                        ls_msg = j[0].onCorrect
                    } else {
                        ls_status = "onError";
                        ls_msg = $.formValidator.getStatusText(h, k.onError)
                    }
                    k.isValid = lb_isValid;
                    $.formValidator.setTipState(h, ls_status, ls_msg);
                    if (e.initConfig.status == "sumbitingWithAjax" && e.initConfig.ajaxCountSubmit == 0) {
                        if (i.formID != "") {
                            $('#' + i.formID).trigger('submit')
                        }
                    }
                }, complete: function (a, b) {
                    if (k.buttons && k.buttons.length > 0) {
                        k.buttons.attr({ "disabled": false })
                    };
                    k.complete(a, b)
                }, beforeSend: function (a, b) {
                    if (this.lastXMLHttpRequest) {
                        this.lastXMLHttpRequest.abort()
                    };
                    this.lastXMLHttpRequest = a;
                    if (k.buttons && k.buttons.length > 0) {
                        k.buttons.attr({ "disabled": true })
                    };
                    var c = k.beforeSend(a, b);
                    var d = false;
                    k.isValid = false;
                    if ((typeof c) == "boolean" && c) {
                        d = true;
                        $.formValidator.setTipState(h, "onLoad", j[e.ajax].onWait)
                    } else {
                        d = false;
                        $.formValidator.setTipState(h, "onError", c)
                    } k.lastValid = "-1"; if (d) {
                        $.formValidator.dealAjaxRequestCount(n, 1)
                    } return d
                }, error: function (a, b, c) {
                    $.formValidator.dealAjaxRequestCount(n, -1);
                    $.formValidator.setTipState(h, "onError", $.formValidator.getStatusText(h, k.onError));
                    k.isValid = false;
                    e.dom.onceValided = true; k.error(a, b, c)
                }, processData: k.processData
            })
        }, dealAjaxRequestCount: function (a, b) {
            var c = $("body").data(a);
            c.ajaxCountValid = c.ajaxCountValid + b;
            if (c.status == "sumbitingWithAjax") {
                c.ajaxCountSubmit = c.ajaxCountSubmit + b
            }
        }, regexValid: function (a) {
            var b = a.id;
            var c = a.setting;
            var d = $("#" + b).get(0).tagName;
            var e = $("#" + b).get(0);
            var f;
            if (e.settings[0].empty && e.value == "") {
                c.isValid = true
            } else {
                var g = c.regExp;
                c.isValid = false;
                if ((typeof g) == "string")
                    g = [g];
                $.each(g, function () {
                    var r = this;
                    if (c.dataType == "enum") {
                        r = eval("regexEnum." + r)
                    } if (r == undefined || r == "") {
                        return false
                    }
                    f = (new RegExp(r, c.param)).test($(e).val());
                    if (c.compareType == "||" && f) {
                        c.isValid = true; return false
                    }
                    if (c.compareType == "&&" && !f) {
                        return false
                    }
                });
                if (!c.isValid) c.isValid = f
            }
        }, functionValid: function (a) {
            var b = a.id;
            var c = a.setting;
            var d = $("#" + b);
            var e = c.fun(d.val(), d.get(0));
            if (e != undefined) {
                if ((typeof e) === "string") {
                    c.isValid = false; a.errormsg = e
                } else {
                    c.isValid = e
                }
            } else {
                c.isValid = true
            }
        }, inputValid: function (a) {
            var b = a.id;
            var c = a.setting;
            var d = $("#" + b);
            var e = d.get(0);
            var f = d.val();
            var g = e.type;
            var h = $.formValidator.getLength(b);
            var i = c.empty, emptyError = false;
            switch (g) {
                case "text": case "hidden": case "password": case "textarea": case "file": if (c.type == "size") {
                    i = c.empty;
                    if (!i.leftEmpty) {
                        emptyError = (f.replace(/^[ \s]+/, '').length != f.length)
                    }
                    if (!emptyError && !i.rightEmpty) {
                        emptyError = (f.replace(/[ \s]+$/, '').length != f.length)
                    }
                    if (emptyError && i.emptyError) { a.errormsg = i.emptyError }
                }
                case "checkbox": case "select-one": case "select-multiple": case "radio":
                    var j = false;
                    if (g == "select-one" || g == "select-multiple") {
                        c.type = "size"
                    }
                    var k = c.type;
                    if (k == "size") {
                        if (!emptyError) { j = true }
                        if (j) { f = h }
                    }
                    else if (k == "date" || k == "datetime") {
                        var l = false; if (k == "date") { j = isDate(f) }; if (k == "datetime") { j = isDate(f) }; if (j) { f = new Date(f); c.min = new Date(c.min); c.max = new Date(c.max) }
                    }
                    else {
                        stype = (typeof c.min);
                        if (stype == "number") {
                            f = (new Number(f)).valueOf();
                            if (!isNaN(f)) { j = true }
                        }
                        if (stype == "string") { j = true }
                    }
                    c.isValid = false;

                    if (j) {
                        if (f < c.min || f > c.max) {
                            if (f < c.min && c.onErrorMin) {
                                a.errormsg = c.onErrorMin
                            }
                            if (f > c.min && c.onErrorMax) {
                                a.errormsg = c.onErrorMax
                            }
                        } else { c.isValid = true }
                    }
                    break
            }
        }, compareValid: function (a) {
            var b = a.id;
            var c = a.setting;
            var d = $("#" + b);
            var e = $("#" + c.desID);
            var f = c.dataType;
            curvalue = d.val();
            ls_data = e.val();
            if (f == "number") {
                if (!isNaN(curvalue) && !isNaN(ls_data)) {
                    curvalue = parseFloat(curvalue);
                    ls_data = parseFloat(ls_data)
                } else { return }
            } if (f == "date" || f == "datetime") {
                var g = false;
                if (f == "date") {
                    g = (isDate(curvalue) && isDate(ls_data))
                };
                if (f == "datetime") {
                    g = (isDateTime(curvalue) && isDateTime(ls_data))
                };
                if (g) {
                    curvalue = new Date(curvalue); ls_data = new Date(ls_data)
                } else { return }
            }
            switch (c.operateor) {
                case "=": c.isValid = (curvalue == ls_data);
                    break;
                case "!=": c.isValid = (curvalue != ls_data);
                    break;
                case ">": c.isValid = (curvalue > ls_data); break;
                case ">=": c.isValid = (curvalue >= ls_data); break;
                case "<": c.isValid = (curvalue < ls_data); break;
                case "<=": c.isValid = (curvalue <= ls_data); break;
                default: c.isValid = false; break
            }
        }, passwordValid: function (g) {
            var h = g.settings[g.validatorPasswordIndex];
            var l = g.value;
            function isContinuousChar(a) {
                var a = a.toLowerCase();
                var b = 0;
                for (var i = 0; i < a.length; i++) {
                    if (a.charCodeAt(i) != b + 1 && b != 0)
                        return false;
                    else b = a.charCodeAt(i)
                }
                return true
            }
            function isSameChar(a) {
                var a = a.toLowerCase();
                var b = 0;
                for (var i = 0; i < a.length; i++) {
                    if (a.charCodeAt(i) != b && b != 0)
                        return false;
                    else b = a.charCodeAt(i)
                }
                return true
            }
            function getFlag(a, b, c) {
                if (b == undefined) {
                    b = [0, 0, 0, 0]
                }
                if (c == undefined) {
                    c = -1
                };
                c++; b[c] = a % 2;
                a = Math.floor(a / 2);
                if (a == 1 || a == 0) {
                    b[c + 1] = a; return b
                }
                b = getFlag(a, b, c);
                return b
            }
            if (l == "") {
                return 0
            };
            if (h.onErrorContinueChar != "" && isContinuousChar(l)) {
                return -1
            };
            if (h.onErrorSameChar != "" && isSameChar(l)) {
                return -2
            };
            if (h.compareID != "" && $("#" + h.compareID).val() == l) {
                return -3
            };
            var m = [0, 0, 0, 0];
            var o = "!,@,#,$,%,\^,&,*,?,_,~";
            var p = l.length;
            for (var i = 0; i < p; i++) {
                var c = l.charCodeAt(i);
                if (c >= 48 && c <= 57) { m[0] += 1 }
                else if (c >= 97 && c <= 122) { m[1] += 1 }
                else if (c >= 65 && c <= 90) { m[2] += 1 }
                else if (o.indexOf(l.substr(i, 1)) >= 0) { m[3] += 1 }
            }
            var q = 0;
            var r = true;
            $.each(passwordStrengthRule, function (j, n)
            {
                var e = n.level;
                var f = n.rule;
                $.each(f, function (i, c) {
                    var d = 0; r = true;
                    $.each(getFlag(c.flag), function (k, a) {
                        if (a == 1) { b = c.value[d++]; var b = b == 0 ? p : (b > p ? p : b); if (m[k] < b) { r = false; return false } }
                    }); if (r) { q = e; return false }
                }); if (r) { q = e }
            }); return q
        }, localTooltip: function (e) { e = e || window.event; var a = e.pageX || (e.clientX ? e.clientX + document.body.scrollLeft : 0); var b = e.pageY || (e.clientY ? e.clientY + document.body.scrollTop : 0); $("#fvtt").css({ "top": (b + 2) + "px", "left": (a - 40) + "px" }) }, reloadAutoTip: function (d) { if (d == undefined) d = "1"; var e = $("body").data(d); $.each(e.validObjects, function () { var a = this.settings[0]; if (e.mode == "AutoTip" && a.bind == true) { var b = "#" + a.relativeID; var c = $(b).offset(); var y = c.top; var x = $(b).width() + c.left; $("#" + a.tipID).parent().show().css({ left: x + "px", top: y + "px" }) } }) }, getStatusText: function (a, b) { return ($.isFunction(b) ? b($(a).val()) : b) }, resetInputValue: function (d, e, f) { var g; if (f) { g = $("#" + f) } else { g = $(e.showTextObjects) } g.each(function (a, b) { if (b.isInputControl) { var c = b.settings[0].onShowText; if (d && c == b.value) { b.value = "" }; if (!d && c != "" && b.value == "") { b.value = c } } }) }
    };
    $.fn.formValidator = function (u) { u = u || {}; var v = {}; if (u.validatorGroup == undefined) { u.validatorGroup = "1" }; $.extend(true, v, formValidator_setting); var w = $("body").data(u.validatorGroup); if (w.mode == "SingleTip") { v.tipCss = { left: 10, top: 1, width: 22, height: 22, display: "none" } }; if (w.mode == "AlertTip") { v.autoModify = true }; $.extend(true, v, u || {}); return this.each(function (e) { this.validatorGroup = u.validatorGroup; var f = $(this); var g = {}; $.extend(true, g, v); var h = f.attr('id'); if (!h) { h = Math.ceil(Math.random() * 50000000); f.attr('id', h) } var i = g.tipID ? g.tipID : h + "Tip"; if (w.mode == "AutoTip" || w.mode == "FixTip") { var j = $("#" + i); if (w.mode == "AutoTip" && j.length == 0) { var k = g.relativeID ? g.relativeID : h; var l = $("#" + k).offset(); g.tipCss.top = l.top + g.tipCss.top; g.tipCss.left = $("#" + k).width() + l.left + g.tipCss.left; j = $("<div style='position:absolute;' id='" + i + "'></div>").appendTo($("body")); j.css(g.tipCss); v.relativeID = k } j.css("margin", "0px").css("padding", "0px").css("background", "transparent") } else if (w.mode == "SingleTip") { f.showTooltips() } v.tipID = i; v.pwdTipID = g.pwdTipID ? g.pwdTipID : v.tipID; v.fixTipID = g.fixTipID ? g.fixTipID : h + "FixTip"; $.formValidator.appendValid(h, v); var m = $.inArray(f, w.validObjects); if (m == -1) { if (g.ajax) { w.ajaxObjects.push(this) } w.validObjects.push(this) } else { w.validObjects[m] = this } if (w.mode != "AlertTip") { $.formValidator.setTipState(this, "onShow", v.onShow) } var n = this.tagName.toLowerCase(); var o = this.type; var p = v.defaultValue; var q = o == "password" || o == "text" || o == "textarea"; this.isInputControl = q; if (p) { f.val(p) } var r = $("#" + v.fixTipID); var s = v.onShowFixText; if (r.length == 1 && onMouseOutFixTextHtml != "" && onMouseOnFixTextHtml != "" && s != "") { f.hover(function () { r.html(onMouseOnFixTextHtml.replace(/\$data\$/g, s)) }, function () { r.html(onMouseOutFixTextHtml.replace(/\$data\$/g, s)) }); r.css("padding", "0px 0px 0px 0px").css("margin", "0px 0px 0px 0px").html(onMouseOutFixTextHtml.replace(/\$data\$/g, v.onShowFixText)) } var t = v.onShowText; if (n == "input" || n == "textarea") { if (q) { if (t != "" && f.val() == "") { showObjs = w.showTextObjects; w.showTextObjects = showObjs + (showObjs != "" ? ",#" : "#") + h; f.val(t); f.css("color", v.onShowTextColor.mouseOutColor) } } f.focus(function () { if (!v.bind) { return } if (q) { var a = f.val(); this.validValueOld = a; if (t == a) { this.value = ""; f.css("color", v.onShowTextColor.mouseOnColor) } }; if (w.mode != "AlertTip") { var b = $("#" + i); this.lastshowclass = b.attr("class"); this.lastshowmsg = b.text(); $.formValidator.setTipState(this, "onFocus", v.onFocus) }; if (this.validatorPasswordIndex > 0) { $("#" + v.pwdTipID).show(); f.trigger('keyup') } }); f.bind("keyup", function () { if (!v.bind) { return } if (this.validatorPasswordIndex > 0) { try { var a = $.formValidator.oneIsValid(h); var b = $.formValidator.passwordValid(this); if (b < 0) { b = 0 }; if (!a.isValid) { b = 0 }; $("#" + v.pwdTipID).show(); $("#" + v.pwdTipID).html(passwordStrengthStatusHtml[b]) } catch (e) { alert("密码强度校验失败,错误原因:变量passwordStrengthStatusHtml语法错误或者为设置)") } } }); f.bind(v.triggerEvent, function () { if (!v.bind) { return } var a = this.settings; if (a[0].leftTrim) { this.value = this.value.replace(/^\s*/g, "") } if (a[0].rightTrim) { this.value = this.value.replace(/\s*$/g, "") } if (q) { if (this.value == "" && t != "") { this.value = t } if (this.value == t) { f.css("color", v.onShowTextColor.mouseOutColor) } } var b = $.formValidator.oneIsValid(h); if (b == null) { return } if (b.ajax >= 0) { $.formValidator.showAjaxMessage(b) } else { var c = $.formValidator.showMessage(b); if (!b.isValid) { var d = v.autoModify && q; if (d) { $(this).val(this.validValueOld); if (w.mode != "AlertTip") { $.formValidator.setTipState(this, "onShow", $.formValidator.getStatusText(this, v.onCorrect)) } } else { if (w.forceValid || v.forceValid) { intiConfig.onAlert(c); this.focus() } } } } }) } else if (n == "select") { f.bind({ focus: function () { if (!v.bind) { return } if (w.mode != "AlertTip") { $.formValidator.setTipState(this, "onFocus", v.onFocus) } }, blur: function () { if (!v.bind) { return } if (this.validValueOld == undefined || this.validValueOld == f.val()) { $(this).trigger("change") } }, change: function () { if (!v.bind) { return } var a = $.formValidator.oneIsValid(h); if (a == null) { return } if (a.ajax >= 0) { $.formValidator.showAjaxMessage(a) } else { $.formValidator.showMessage(a) } } }) } }) }; $.fn.inputValidator = function (a) { var b = {}; $.extend(true, b, inputValidator_setting, a || {}); return this.each(function () { $.formValidator.appendValid(this.id, b) }) }; $.fn.compareValidator = function (a) { var b = {}; $.extend(true, b, compareValidator_setting, a || {}); return this.each(function () { $.formValidator.appendValid(this.id, b) }) }; $.fn.regexValidator = function (a) { var b = {}; $.extend(true, b, regexValidator_setting, a || {}); return this.each(function () { $.formValidator.appendValid(this.id, b) }) }; $.fn.functionValidator = function (a) { var b = {}; $.extend(true, b, functionValidator_setting, a || {}); return this.each(function () { $.formValidator.appendValid(this.id, b) }) }; $.fn.ajaxValidator = function (b) { var c = {}; $.extend(true, c, ajaxValidator_setting, b || {}); return this.each(function () { var a = $("body").data(this.validatorGroup); if ($.inArray(this, a.ajaxObjects) == -1) { a.ajaxObjects.push(this) } this.validatorAjaxIndex = $.formValidator.appendValid(this.id, c) }) }; $.fn.passwordValidator = function (a) { var b = {}; $.extend(true, b, passwordValidator_setting, a || {}); return this.each(function () { this.validatorPasswordIndex = $.formValidator.appendValid(this.id, b) }) }; $.fn.defaultPassed = function (b) { return this.each(function () { var a = this.settings; a[0].defaultPassed = true; this.onceValided = true; for (var i = 1; i < a.length; i++) { a[i].isValid = true; if (!($("body").data(a[0].validatorGroup).mode == "AlertTip")) { this.lastshowclass = b ? "onShow" : "onCorrect"; this.lastshowmsg = b ? a[0].onShow : a[0].onCorrect; $.formValidator.setTipState(this, this.lastshowclass, this.lastshowmsg) } } }) }; $.fn.unFormValidator = function (a) { return this.each(function () { if (this.settings) { this.settings[0].bind = !a; if (a) { $("#" + this.settings[0].tipID).hide() } else { $("#" + this.settings[0].tipID).show() } } }) }; $.fn.showTooltips = function () { if ($("body [id=fvtt]").length == 0) { fvtt = $("<div id='fvtt' style='position:absolute;z-index:56002'></div>"); $("body").append(fvtt); fvtt.before("<iframe index=0 src='about:blank' class='fv_iframe' scrolling='no' frameborder='0'></iframe>") } return this.each(function () { jqobj = $(this); s = $("<span class='top' id=fv_content style='display:block'></span>"); b = $("<b class='bottom' style='display:block' />"); this.tooltip = $("<span class='fv_tooltip' style='display:block'></span>").append(s).append(b).css({ "filter": "alpha(opacity:95)", "KHTMLOpacity": "0.95", "MozOpacity": "0.95", "opacity": "0.95" }); jqobj.bind({ mouseover: function (e) { $("#fvtt").empty().append(this.tooltip).show(); $("#fv_content").html(this.Tooltip); $.formValidator.localTooltip(e) }, mouseout: function () { $("#fvtt").hide() }, mousemove: function (e) { $.formValidator.localTooltip(e) } }) }) }
})(jQuery);
var initConfig_setting =
    {
        theme: "Default", validatorGroup: "1", formID: "", submitOnce: false, ajaxForm: null, mode: "FixTip", errorFocus: true, wideWord: true, forceValid: false, debug: false, inIframe: false, onSuccess: function () { return true }, onError: $.noop, onAlert: function () { alert(arguments[0]) }, status: "", ajaxPrompt: "当前有数据正在进行服务器端校验，请稍候", ajaxCountSubmit: 0, ajaxCountValid: 0, validObjects: [], ajaxObjects: [], showTextObjects: "", validateType: "initConfig", offsetChrome: { left: 42, top: 0 }, oneByOneVerify: false
    };
var formValidator_setting =
    {
        validatorGroup: "1", onShowText: "", onShowTextColor:
            {
                mouseOnColor: "#000000", mouseOutColor: "#999999"
            }, onShowFixText: "", onShow: "请输入内容", onFocus: "请输入内容", onCorrect: "输入正确", onEmpty: "输入内容为空", empty: false, autoModify: false, defaultValue: null, bind: true, ajax: false, validateType: "formValidator", tipCss: { left: 10, top: -4, height: 20, width: 280 }, triggerEvent: "blur", forceValid: false, tipID: null, pwdTipID: null, fixTipID: null, relativeID: null, index: 0, leftTrim: false, rightTrim: false
    };
var inputValidator_setting =
    {
        isValid: false, type: "size", min: 0, max: 99999, onError: "输入错误", validateType: "inputValidator", empty: { leftEmpty: true, rightEmpty: true, leftEmptyError: null, rightEmptyError: null }
    };
var compareValidator_setting =
    {
        isValid: false, desID: "", operateor: "=", onError: "输入错误", validateType: "compareValidator"
    }; var regexValidator_setting = { isValid: false, regExp: "", param: "i", dataType: "string", compareType: "||", onError: "输入的格式不正确", validateType: "regexValidator" }; var ajaxForm_setting = { type: "GET", url: window.location.href, dataType: "html", timeout: 100000, data: null, type: "GET", async: true, cache: false, buttons: null, beforeSend: function () { return true }, success: function () { return true }, complete: $.noop, processData: true, error: $.noop }; var ajaxValidator_setting = { isValid: false, lastValid: "", oneceValid: false, randNumberName: "rand", onError: "服务器校验没有通过", onWait: "正在等待服务器返回数据", validateType: "ajaxValidator" }; $.extend(true, ajaxValidator_setting, ajaxForm_setting); var functionValidator_setting = { isValid: true, fun: function () { this.isValid = true }, validateType: "functionValidator", onError: "输入错误" }; var passwordValidator_setting = { isValid: true, compareID: "", validateType: "passwordValidator", onErrorContinueChar: "密码字符为连续字符不被允许", onErrorSameChar: "密码字符都相同不被允许", onErrorCompareSame: "密码于用户名相同不被允许" }; var fv_scriptSrc = document.getElementsByTagName('script')[document.getElementsByTagName('script').length - 1].src;